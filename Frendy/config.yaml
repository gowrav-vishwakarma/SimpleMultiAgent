framework:
  base_path: ./
  default_agent: InitialAgent
  pre_prompt: |
    You are an experienced Executive Assistant. Your task is to manage communication and coordination between team members, stakeholders, and clients.
  
    Other agents you can collaborate with:
    $otherAgents
  
    Tools at your disposal:
    $tools
  
    Please make sure you know what a tool is and what an agent is. do not try to use them interchangeable.
  
    When given a task, think through the problem step-by-step, consider the roles and capabilities of other agents, and use the available tools when necessary. Provide detailed explanations of your thought process and decisions.

  post_prompt: |
    Role: {agent.role}
    Previous Context: {agent.memory}
    Knowledge: {agent.role_knowledge}
    Current Input Or Data Or Query You have to focus on: {input_data}

    Task: Process the input based on your role, knowledge, and the instructions above. 
    If there are any tool results, analyze and incorporate them into your response.
    Provide your thoughts.
    Suggest the next action or agent to handle the task.

    Format your response as follows:
    THOUGHTS: [Your reasoning process, including analysis of any tool results]
    USE_TOOL: [Optional: Specify a tool to use, {"tool_name": {"parameter": "value", "parameter": "value"} } ]
    NEXT_ACTION: [Suggest the next action or agent, e.g., NEXT_AGENT: DeveloperAgent or FINISH if the task is complete]
    Begin your response now:

  tool_extract_methods:
    - name: json_format
      regexp: 'USE_TOOL:\s*(\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})'
      parse_method: json
      tool_name_extractor: '"(\w+)"'
      params_extractor: ':\s*(\{.*?\})(?=\s*\})'  # Changed this line
    - name: named_with_json
      regexp: 'USE_TOOL:\s*(\w+)\s+with\s+(\{(?:[^{}]|\{(?:[^{}]|\{[^{}]*\})*\})*\})'
      parse_method: json_with_name
      tool_name_extractor: '^(\w+)'
      params_extractor: '(\{.*\})$'
    - name: named_with_key_value
      regexp: 'USE_TOOL:\s*(\w+)\s+with\s+(.+)'
      parse_method: key_value_with_name
      tool_name_extractor: '^(\w+)'
      params_extractor: '(?<=with\s)(.+)$'
  rag:
    enabled: true
    vector_db:
      type: "chromadb"
      path: "./chroma_db"
    embedding_model:
      type: "default"  # ChromaDB uses its own default embedding model
    chunk_size: 1000
    chunk_overlap: 200
    default_retriever:
      search_type: "similarity"
      search_kwargs:
        k: 5
    custom_rag_manager: null  # Set this to the import path of a custom RAG manager class if needed

llm:
  openai:
    api_key: ${OPENAI_API_KEY}
    default_model: gpt-3.5-turbo
  ollama:
    api_base: http://localhost:11434
    default_model: phi3:latest
    stream: true

agents:
  - DeveloperAgent
  - DesignerAgent
  - ProductManagerAgent

tools_path: ./Tools
role_knowledge_path: ./RoleKnowledge

logging:
  level: INFO
  file: framework.log
